from typing import List

from typing import overload
import qulacs_osaka_core

def drop_qubit(state: qulacs_osaka_core.StateVectorCpu, target: List[int], projection: List[int]) -> qulacs_osaka_core.StateVectorCpu: ...
def inner_product(state_bra: qulacs_osaka_core.StateVectorCpu, state_ket: qulacs_osaka_core.StateVectorCpu) -> complex: ...
@overload
def partial_trace(state: qulacs_osaka_core.StateVectorCpu, target_traceout: List[int]) -> qulacs_osaka_core.DensityMatrix: ...
@overload
def partial_trace(state: qulacs_osaka_core.DensityMatrix, target_traceout: List[int]) -> qulacs_osaka_core.DensityMatrix: ...
@overload
def permutate_qubit(state: qulacs_osaka_core.StateVectorCpu, order: List[int]) -> qulacs_osaka_core.StateVectorCpu: ...
@overload
def permutate_qubit(state: qulacs_osaka_core.DensityMatrix, order: List[int]) -> qulacs_osaka_core.DensityMatrix: ...
@overload
def tensor_product(state_left: qulacs_osaka_core.StateVectorCpu, state_right: qulacs_osaka_core.StateVectorCpu) -> qulacs_osaka_core.StateVectorCpu: ...
@overload
def tensor_product(state_left: qulacs_osaka_core.DensityMatrix, state_right: qulacs_osaka_core.DensityMatrix) -> qulacs_osaka_core.DensityMatrix: ...
