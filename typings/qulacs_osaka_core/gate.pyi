from typing import List

from typing import overload
import numpy
import qulacs_osaka_core
import scipy.sparse

def BitFlipNoise(index: int, prob: float) -> qulacs_osaka_core.QuantumGateWrapped: ...
def CNOT(control: int, target: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def CZ(control: int, target: int) -> qulacs_osaka_core.QuantumGateBasic: ...
@overload
def DenseMatrix(index: int, matrix: numpy.ndarray[numpy.complex128[m,n]]) -> qulacs_osaka_core.QuantumGateBasic: ...
@overload
def DenseMatrix(index_list: List[int], matrix: numpy.ndarray[numpy.complex128[m,n]]) -> qulacs_osaka_core.QuantumGateBasic: ...
def DephasingNoise(index: int, prob: float) -> qulacs_osaka_core.QuantumGateWrapped: ...
def DepolarizingNoise(index: int, prob: float) -> qulacs_osaka_core.QuantumGateWrapped: ...
def DiagonalMatrix(index_list: List[int], diagonal_element: numpy.ndarray[numpy.complex128[m,1]]) -> qulacs_osaka_core.QuantumGateBasic: ...
def FREDKIN(control: int, target1: int, target2: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def H(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def Identity(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def IndependentXZNoise(index: int, prob: float) -> qulacs_osaka_core.QuantumGateWrapped: ...
def P0(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def P1(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def Pauli(index_list: List[int], pauli_ids: List[int]) -> qulacs_osaka_core.QuantumGateBasic: ...
def PauliRotation(index_list: List[int], pauli_ids: List[int], angle: float) -> qulacs_osaka_core.QuantumGateBasic: ...
def RX(index: int, angle: float) -> qulacs_osaka_core.QuantumGateBasic: ...
def RY(index: int, angle: float) -> qulacs_osaka_core.QuantumGateBasic: ...
def RZ(index: int, angle: float) -> qulacs_osaka_core.QuantumGateBasic: ...
def S(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def SWAP(target1: int, target2: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def Sdag(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def SparseMatrix(index_list: List[int], matrix: scipy.sparse.csc_matrix[numpy.complex128]) -> qulacs_osaka_core.QuantumGateBasic: ...
def T(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def TOFFOLI(control1: int, control2: int, target: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def Tdag(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def TwoQubitDepolarizingNoise(index1: int, index2: int, prob: float) -> qulacs_osaka_core.QuantumGateWrapped: ...
def X(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def Y(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def Z(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def sqrtX(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def sqrtXdag(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def sqrtY(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
def sqrtYdag(index: int) -> qulacs_osaka_core.QuantumGateBasic: ...
